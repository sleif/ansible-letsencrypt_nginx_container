---

- name: "Port 443 oeffnen"
  ansible.posix.firewalld:
    service: https
    permanent: true
    immediate: true
    state: enabled

- name: "Port 80 oeffnen"
  ansible.posix.firewalld:
    service: http
    permanent: true
    immediate: true
    state: enabled

# enable fallback nameserver in case pihole is running on the same host
- name: "Enable fallback nameserver in resolv.conf"
  ansible.builtin.lineinfile:
    path: /etc/resolv.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - {regexp: '^nameserver 1\.1\.1\.1', line: 'nameserver 1.1.1.1'}
  when: nameserver_fallback_needed | bool

# - name: "Gather info about the possibly running pod"
#   containers.podman.podman_pod_info:
#     name: "{{ pod_name }}"
#   register: _pod_info
#   when:
#     - pod_name is defined
#     - pod_name | length > 0
# - name: "create the pod"
#   containers.podman.podman_pod:
#     name: "{{ pod_name }}"
#     publish: "{{ pod_published_ports | default(omit) }}"
#   register: _pod_info
#   when:
#     - pod_name is defined
#     - pod_name | length > 0
#     - _pod_info.pods | length == 0
# - ansible.builtin.debug: var=_pod_info

- name: "create persistant nextcloud data directories"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "{{ container_storage_dir_base }}/nginx/htpasswd"
    - "{{ container_storage_dir_base }}/nginx/certs"
    - "{{ container_storage_dir_base }}/nginx/vhost.d"
    - "{{ container_storage_dir_base }}/nginx/html"
    - "{{ container_storage_dir_base }}/nginx/log"

# - name: "pull latest image"
#   containers.podman.podman_image:
#     name: "docker.io/jwilder/nginx-proxy:latest"
#     force: true

- name: "start jwilder nginx-proxy container"
  containers.podman.podman_container:
    name: "nginx-proxy"
    image: docker.io/nginxproxy/nginx-proxy
    # image: docker.io/jwilder/nginx-proxy
    # pod: "{{ pod_name | default(omit) }}"
    publish: "{{ pod_published_ports | default(omit) }}"
    state: started
    restart_policy: always
    recreate: true
    restart: true
    # force_restart: true
    volumes:
      - "{{ container_storage_dir_base }}/nginx/htpasswd:/etc/nginx/htpasswd:ro,Z"
      - "{{ container_storage_dir_base }}/nginx/certs:/etc/nginx/certs:ro,Z"
      - "{{ container_storage_dir_base }}/nginx/vhost.d:/etc/nginx/vhost.d:Z"
      - "{{ container_storage_dir_base }}/nginx/html:/usr/share/nginx/html:Z"
      - "{{ container_storage_dir_base }}/nginx/log:/var/log/nginx:Z"
      - /run/podman/podman.sock:/tmp/docker.sock:ro,Z
    label:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: true
    security_opt:
      - label:type:docker_t
    generate_systemd:
      path: /etc/systemd/system/
      restart_policy: always
  register: _podstart
# ignore_errors: true

- name: "enable systemd service"
  ansible.builtin.service:
    name: "{{ (_podstart.podman_systemd | dict2items | list | first).key }}"
    enabled: true

- name: "additional nginx proxy configuration nginx/vhost.d/default"
  ansible.builtin.lineinfile:
    path: "{{ container_storage_dir_base }}/nginx/vhost.d/default"
    create: true
    mode: "0644"
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
  loop:
    - {regexp: "^client_max_body_size.*", line: "client_max_body_size        {{ client_max_body_size }};"}
    # - { regexp: "^proxy_connect_timeout.*", line: "proxy_connect_timeout       601;"  }
    # - { regexp: "^proxy_send_timeout.*",    line: "proxy_send_timeout          601;"  }
    # - { regexp: "^proxy_read_timeout.*",    line: "proxy_read_timeout          601;"  }
    # - { regexp: "^send_timeout.*",          line: "send_timeout                601;"  }
    - {regexp: "^fastcgi_request_buffering.*", line: "fastcgi_request_buffering off;"}
  notify: Restart_nginx_proxy
  tags: nginx_defaults

# - name: "pull latest image of jrcs letsencrypt-nginx-proxy-companion"
#   containers.podman.podman_image:
#     name: "docker.io/jrcs/letsencrypt-nginx-proxy-companion:latest"
#     force: true

- name: "start jrcs letsencrypt-nginx-proxy-companion container"
  containers.podman.podman_container:
    name: "nginx-letsencrypt"
    image: "docker.io/nginxproxy/acme-companion:latest"
    # image: "docker.io/jrcs/letsencrypt-nginx-proxy-companion:latest"
    # pod: "{{ pod_name | default(omit) }}"
    state: started
    restart_policy: always
    recreate: true
    restart: true
    # force_restart: true
    volumes_from: nginx-proxy
    volumes:
      # - "{{ container_storage_dir_base }}/nginx/vhost.d:/etc/nginx/vhost.d:Z"
      # - "{{ container_storage_dir_base }}/nginx/html:/usr/share/nginx/html:Z"
      - "{{ container_storage_dir_base }}/nginx/certs:/etc/nginx/certs:rw,Z"
      # - acme:/etc/acme.sh:Z
      - /run/podman/podman.sock:/var/run/docker.sock:ro,Z
    security_opt:
      - label:type:docker_t
    env:
      NGINX_PROXY_CONTAINER: "nginx-proxy"
    generate_systemd:
      path: /etc/systemd/system/
      restart_policy: always
  register: _podstart
# - debug: var=_podstart

- name: "enable systemd service"
  ansible.builtin.service:
    name: "{{ (_podstart.podman_systemd | dict2items | list | first).key }}"
    enabled: true

# - pause:

- name: whoami-Container starten
  # test with 'curl -H "Host: whoami.wernigerode-brocken.de" whoami.wernigerode-brocken.de'
  containers.podman.podman_container:
    name: whoami
    image: docker.io/jwilder/whoami
    # pod: "{{ pod_name | default(omit) }}"
    state: started
    restart_policy: always
    recreate: true
    env:
      VIRTUAL_HOST: "mailcloud-ppd.sleif.de"
      LETSENCRYPT_HOST: "mailcloud-ppd.sleif.de"
      LETSENCRYPT_EMAIL: "misc1@sleif.de"
      LETSENCRYPT_TEST: "true"
    generate_systemd:
      path: /etc/systemd/system/
      restart_policy: always
      # new: true
  register: _podstart
# - debug: var=_podstart

- name: "enable systemd service"
  ansible.builtin.service:
    name: "{{ (_podstart.podman_systemd | dict2items | list | first).key }}"
    enabled: true
