---

- name: Letsencrypt_nginx_container | Port 443 oeffnen
  ansible.posix.firewalld:
    service: https
    permanent: true
    immediate: true
    state: enabled

- name: Letsencrypt_nginx_container | Port 80 oeffnen
  ansible.posix.firewalld:
    service: http
    permanent: true
    immediate: true
    state: enabled

# enable fallback nameserver in case pihole is running on the same host
- name: Letsencrypt_nginx_container | Enable fallback nameserver in resolv.conf
  ansible.builtin.lineinfile:
    path: /etc/resolv.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^nameserver 1\.1\.1\.1', line: 'nameserver 1.1.1.1' }
  when: nameserver_fallback_needed | bool

- name: Letsencrypt_nginx_container | pull latest image
  containers.podman.podman_image:
    name: "docker.io/jwilder/nginx-proxy:latest"
    force: true

- name: Letsencrypt_nginx_container | Gather info about the possibly running pod
  containers.podman.podman_pod_info:
    name: "{{ pod_name }}"
  register: _pod_info
  when:
    - pod_name is defined
    - pod_name | length > 0


- name: Letsencrypt_nginx_container | create the pod
  containers.podman.podman_pod:
    name: "{{ pod_name }}"
    publish: "{{ pod_published_ports | default(omit) }}"
  register: _pod_info
  when:
    - pod_name is defined
    - pod_name | length > 0
    - _pod_info.pods | length == 0

- ansible.builtin.debug: var=_pod_info

- name: Letsencrypt_nginx_container | create persistant nextcloud data directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0750'
  loop:
    - "{{ container_storage_dir_base }}/nginx/htpasswd"
    - "{{ container_storage_dir_base }}/nginx/certs"
    - "{{ container_storage_dir_base }}/nginx/vhost.d"
    - "{{ container_storage_dir_base }}/nginx/html"
    - "{{ container_storage_dir_base }}/nginx/log"

- name: Letsencrypt_nginx_container | start letsencrypt container
  containers.podman.podman_container:
    name: "nginx-proxy"
    image: jwilder/nginx-proxy
    pod: "{{ pod_name | default(omit) }}"
    state: started
    # restart_policy: always
    recreate: true
    # force_restart: true
    volumes:
      - "{{ container_storage_dir_base }}/nginx/htpasswd:/etc/nginx/htpasswd:ro,Z"
      - "{{ container_storage_dir_base }}/nginx/certs:/etc/nginx/certs:ro,Z"
      - "{{ container_storage_dir_base }}/nginx/vhost.d:/etc/nginx/vhost.d:Z"
      - "{{ container_storage_dir_base }}/nginx/html:/usr/share/nginx/html:Z"
      - "{{ container_storage_dir_base }}/nginx/log:/var/log/nginx:Z"
      - /run/podman/podman.sock:/tmp/docker.sock:ro,Z
    # security_opt:
    #   - 'label=type:docker_t'
  # register: _podstart
  # ignore_errors: true

- debug: var=_podstart

# - name: Letsencrypt_nginx_container | start letsencrypt container
#   containers.podman.podman_container:
#     name: "nginx-proxy"
#     image: jwilder/nginx-proxy
#     pod: "{{ pod_name | default(omit) }}"
#     state: started
#     restart_policy: always
#     recreate: true
#     volumes:
#       - "{{ container_storage_dir_base }}/nginx/htpasswd:/etc/nginx/htpasswd:ro,Z"
#       - "{{ container_storage_dir_base }}/nginx/certs:/etc/nginx/certs:ro,Z"
#       - "{{ container_storage_dir_base }}/nginx/vhost.d:/etc/nginx/vhost.d:Z"
#       - "{{ container_storage_dir_base }}/nginx/html:/usr/share/nginx/html:Z"
#       - "{{ container_storage_dir_base }}/nginx/log:/var/log/nginx:Z"
#       # - /var/run/docker.sock:/tmp/docker.sock:ro,Z

- name: Letsencrypt_nginx_container | additional nginx proxy configuration nginx/vhost.d/default
  ansible.builtin.lineinfile:
    path: "{{ container_storage_dir_base }}/nginx/vhost.d/default"
    create: true
    mode: "0644"
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
  loop:
    - {regexp: "^client_max_body_size.*", line: "client_max_body_size        {{ client_max_body_size }};"}
    # - { regexp: "^proxy_connect_timeout.*", line: "proxy_connect_timeout       601;"  }
    # - { regexp: "^proxy_send_timeout.*",    line: "proxy_send_timeout          601;"  }
    # - { regexp: "^proxy_read_timeout.*",    line: "proxy_read_timeout          601;"  }
    # - { regexp: "^send_timeout.*",          line: "send_timeout                601;"  }
    - {regexp: "^fastcgi_request_buffering.*", line: "fastcgi_request_buffering off;"}
  notify: Restart_nginx_proxy
  tags: nginx_defaults

- pause:





- name: Letsencrypt_nginx_container | nginx-proxy
  docker_container:
    name: nginx-proxy
    image: jwilder/nginx-proxy
    state: started
    recreate: yes
    restart_policy: always
    restart: yes
    pull: yes
    networks:
      - name: "{{ DOCKER_NETWORK_NAME }}"
        aliases:
          - nginx-proxy-container
    networks_cli_compatible: yes
    volumes:
      - "{{ container_storage_dir_base }}/nginx/htpasswd:/etc/nginx/htpasswd:ro,Z"
      - "{{ container_storage_dir_base }}/nginx/certs:/etc/nginx/certs:ro,Z"
      - "{{ container_storage_dir_base }}/nginx/vhost.d:/etc/nginx/vhost.d:Z"
      - "{{ container_storage_dir_base }}/nginx/html:/usr/share/nginx/html:Z"
      - "{{ container_storage_dir_base }}/nginx/log:/var/log/nginx:Z"
      - /var/run/docker.sock:/tmp/docker.sock:ro,Z
    security_opts: label:type:docker_t
    ports:
      - '443:443/tcp'
      - '80:80/tcp'
    env:
      DEFAULT_HOST: "{{ nginx_proxy_default_host }}"

- name: "Letsencrypt_nginx_container | additional nginx proxy configuration {{ nginx_storage_dir_base }}/nginx/vhost.d/default"
  lineinfile:
    path: "{{ container_storage_dir_base }}/nginx/vhost.d/default"
    create: yes
    line: "{{ item.line }}"
    regexp: "{{ item.regexp }}"
  loop:
    - { regexp: "^client_max_body_size.*",  line: "client_max_body_size        {{ client_max_body_size }};" }
    #- { regexp: "^proxy_connect_timeout.*", line: "proxy_connect_timeout       601;"  }
    #- { regexp: "^proxy_send_timeout.*",    line: "proxy_send_timeout          601;"  }
    #- { regexp: "^proxy_read_timeout.*",    line: "proxy_read_timeout          601;"  }
    #- { regexp: "^send_timeout.*",          line: "send_timeout                601;"  }
    - { regexp: "^fastcgi_request_buffering.*",  line: "fastcgi_request_buffering off;" }
  notify: restart_nginx_proxy
  tags: nginx_defaults

- name: Letsencrypt_nginx_container | letsencrypt-nginx-proxy-companion-Container starten
  docker_container:
    name: nginx-letsencrypt
    image: jrcs/letsencrypt-nginx-proxy-companion
    state: started
    restart_policy: always
    recreate: yes
    restart: yes
    pull: yes
    networks:
      - name: "{{ DOCKER_NETWORK_NAME }}"
        aliases:
          - nginx-letsencrypt-container
    networks_cli_compatible: yes
    volumes_from: nginx-proxy
    volumes:
      - "{{ container_storage_dir_base }}/nginx/certs:/etc/nginx/certs:rw,Z"
      - /var/run/docker.sock:/var/run/docker.sock:ro,Z
    security_opts: label:type:docker_t
    env:
      NGINX_PROXY_CONTAINER: "nginx-proxy"






- name: "create persistant nextcloud data directories"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0750'
  loop:
    - "{{ container_storage_dir_base }}/nextcloud/nextcloud"
    - "{{ container_storage_dir_base }}/nextcloud/nextcloud_config"
    - "{{ container_storage_dir_base }}/nextcloud/nextcloud_custom_apps"
    - "{{ container_storage_dir_base }}/nextcloud/nextcloud_data"
    - "{{ container_storage_dir_base }}/nextcloud/nextcloud_themes"

- name: Gather info about the pod
  containers.podman.podman_pod_info:
    name: "{{ POD_NAME }}"
  register: _pod_info
  when:
    - POD_NAME is defined
    - POD_NAME | length > 0

- name: create the pod
  containers.podman.podman_pod:
    name: "{{ POD_NAME }}"
    publish: "{{ POD_PUBLISHED_PORTS | default(omit) }}"
  register: _pod_info
  when:
    - POD_NAME is defined
    - POD_NAME | length > 0
    - _pod_info.pods | length == 0

- name: Pull an image
  containers.podman.podman_image:
    name: "nextcloud:{{ NEXTCLOUD_VERSION }}"
    force: yes

# https://store.docker.com/images/nextcloud
- name: Nextcloud-Container starten
  containers.podman.podman_container:
    name: nextcloud
    image: "nextcloud:{{ NEXTCLOUD_VERSION }}"
    pod: "{{ POD_NAME | default(omit) }}"
    # networks:
    #   - name: "{{ DOCKER_NETWORK_NAME }}"
    #     aliases:
    #       - nextcloud-container
    # networks_cli_compatible: yes
    state: started
    restart_policy: always
    recreate: yes
    #restart: yes
    # pull: yes
    volume:
      - "{{ container_storage_dir_base }}/nextcloud/nextcloud:/var/www/html:Z"
      - "{{ container_storage_dir_base }}/nextcloud/nextcloud_config:/var/www/html/config:Z"
      - "{{ container_storage_dir_base }}/nextcloud/nextcloud_custom_apps:/var/www/html/custom_apps:Z"
      - "{{ container_storage_dir_base }}/nextcloud/nextcloud_data:/var/www/html/data:Z"
      - "{{ container_storage_dir_base }}/nextcloud/nextcloud_themes:/var/www/html/themes:Z"
    env: "{{ nextcloud_env.server | combine( nextcloud_env_additions | default({}) ) }}"

- name: nextcloud | wait for nextcloud service comes up
  ansible.builtin.uri:
    url: "https://{{ nextcloud_env.letsencrypt.VIRTUAL_HOST.split(',')[0] }}/"
    status_code: 200
    validate_certs: False
  register: result
  until: result is succeeded
  retries: 120
  delay: 10
